#!/bin/bash

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== VPN Docker Setup Script ===${NC}"

# Check if .env file exists
if [ ! -f .env ]; then
    
    echo -e "${RED}ERROR: .env file not found in current directory.${NC}"
    echo "Please create a .env file with your configuration."
    exit 1
fi

echo -e "${BLUE}Loading variables from .env file...${NC}"

# Source the .env file to load variables
set -a  # Automatically export all variables
source .env
set +a  # Stop automatically exporting

# Required variables for the setup
REQUIRED_VARS=(
    "VPN_USERNAME:VPN Username"
    "VPN_PASSWORD:VPN Password" 
    "VPN_OVPN_PATH:VPN OpenVPN config file path"
    "MYJD_EMAIL:MyJDownloader Email"
    "MYJD_PASSWORD:MyJDownloader Password"
    "MYJD_DEVICE:MyJDownloader Device Name"
    "VNC_PASSWORD:VNC Password"
    "DOWNLOAD_DIR:Download Directory"
)

# Track validation status
VALIDATION_FAILED=false

echo -e "${BLUE}Validating required variables...${NC}"

# Check each required variable
for var_info in "${REQUIRED_VARS[@]}"; do
    
    var_name="${var_info%%:*}"
    var_description="${var_info##*:}"
    var_value="${!var_name}"
    
    if [ -z "$var_value" ]; then
    
        echo -e "${RED}✗ ERROR: $var_name ($var_description) is not set.${NC}"
        VALIDATION_FAILED=true

    else
        
        # Mask sensitive values for display
        if [[ "$var_name" == *"PASSWORD"* ]] || [[ "$var_name" == *"USERNAME"* ]]; then
        
            display_value="***masked***"

        else
            
            display_value="$var_value"
        fi
        
        echo -e "${GREEN}✓ $var_name: $display_value${NC}"
    fi
done

# Exit if validation failed
if [ "$VALIDATION_FAILED" = true ]; then
    
    echo -e "${RED}Please fix the missing variables in your .env file and try again.${NC}"
    exit 1
fi

echo -e "${BLUE}All variables validated successfully!${NC}"

# Validate VPN config file exists
echo -e "${BLUE}Checking VPN configuration file...${NC}"

if [ ! -f "$VPN_OVPN_PATH" ]; then
    
    echo -e "${RED}ERROR: VPN config file not found at: $VPN_OVPN_PATH${NC}"
    echo "Please check the VPN_OVPN_PATH in your .env file."
    exit 1
fi

echo -e "${GREEN}✓ VPN config file found: $VPN_OVPN_PATH${NC}"

# Validate download directory
echo -e "${BLUE}Checking download directory...${NC}"

if [ ! -d "$DOWNLOAD_DIR" ]; then

    echo -e "${YELLOW}WARNING: Download directory does not exist: $DOWNLOAD_DIR${NC}"
    read -p "Create it? (y/n): " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then

        mkdir -p "$DOWNLOAD_DIR"
        echo -e "${GREEN}✓ Created download directory: $DOWNLOAD_DIR${NC}"

    else
        
        echo -e "${RED}Please create the download directory or update DOWNLOAD_DIR in .env${NC}"
        exit 1
    fi

else
    
    echo -e "${GREEN}✓ Download directory exists: $DOWNLOAD_DIR${NC}"
fi

# Create VPN auth file
echo -e "${BLUE}Creating VPN authentication file...${NC}"

cat > vpn-auth.txt << EOF
${VPN_USERNAME}
${VPN_PASSWORD}
EOF

# Secure the auth file
chmod 600 vpn-auth.txt

# Verify the auth file was created
if [ -f vpn-auth.txt ]; then
    
    echo -e "${GREEN}✓ VPN authentication file created successfully.${NC}"

else
    
    echo -e "${RED}ERROR: Failed to create VPN authentication file.${NC}"
    exit 1
fi

# Check if OpenVPN config needs auth-user-pass line
echo -e "${BLUE}Checking OpenVPN configuration...${NC}"
if ! grep -q "auth-user-pass" "$VPN_OVPN_PATH"; then
    
    echo -e "${YELLOW}WARNING: Your OpenVPN config file doesn't contain 'auth-user-pass' directive.${NC}"
    echo "This line is required for the Docker setup to work properly."
    read -p "Add 'auth-user-pass /vpn/vpn.auth' to your config file? (y/n): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
    
        # Create backup
        cp "$VPN_OVPN_PATH" "${VPN_OVPN_PATH}.backup"
        echo "auth-user-pass /vpn/vpn.auth" >> "$VPN_OVPN_PATH"
        echo -e "${GREEN}✓ Added auth-user-pass directive to OpenVPN config.${NC}"
        echo -e "${BLUE}Backup created: ${VPN_OVPN_PATH}.backup${NC}"

    else
        
        echo -e "${YELLOW}Please manually add 'auth-user-pass /vpn/vpn.auth' to your OpenVPN config file.${NC}"
    fi

else
    
    echo -e "${GREEN}✓ OpenVPN config already contains auth-user-pass directive.${NC}"
fi

# Summary
echo -e "${GREEN}"
echo "================================="
echo "Setup completed successfully! ✓"
echo "================================="
echo -e "${NC}"
echo "Files created/verified:"
echo "  • vpn-auth.txt (VPN credentials)"
echo "  • OpenVPN config: $VPN_OVPN_PATH"
echo "  • Download directory: $DOWNLOAD_DIR"
echo ""
echo -e "${BLUE}You can now run: docker-compose up -d${NC}"
echo ""
echo "To monitor the setup:"
echo "  • Check logs: docker-compose logs -f"
echo "  • Test VPN: docker exec openvpn wget -qO- ifconfig.me"
echo "  • Access JDownloader: http://localhost:5800"